/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SearchApiService SearchApi service
type SearchApiService service

type ApiSearchFuzzyPostRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	fuzzySearchRequest *FuzzySearchRequest
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiSearchFuzzyPostRequest) FuzzySearchRequest(fuzzySearchRequest FuzzySearchRequest) ApiSearchFuzzyPostRequest {
	r.fuzzySearchRequest = &fuzzySearchRequest
	return r
}
func (r ApiSearchFuzzyPostRequest) Region(region string) ApiSearchFuzzyPostRequest {
	r.region = &region
	return r
}
func (r ApiSearchFuzzyPostRequest) Namespace(namespace string) ApiSearchFuzzyPostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiSearchFuzzyPostRequest) Index(index int32) ApiSearchFuzzyPostRequest {
	r.index = &index
	return r
}
func (r ApiSearchFuzzyPostRequest) Wait(wait int32) ApiSearchFuzzyPostRequest {
	r.wait = &wait
	return r
}
func (r ApiSearchFuzzyPostRequest) Stale(stale string) ApiSearchFuzzyPostRequest {
	r.stale = &stale
	return r
}
func (r ApiSearchFuzzyPostRequest) Prefix(prefix string) ApiSearchFuzzyPostRequest {
	r.prefix = &prefix
	return r
}
func (r ApiSearchFuzzyPostRequest) XNomadToken(xNomadToken string) ApiSearchFuzzyPostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiSearchFuzzyPostRequest) PerPage(perPage int32) ApiSearchFuzzyPostRequest {
	r.perPage = &perPage
	return r
}
func (r ApiSearchFuzzyPostRequest) NextToken(nextToken string) ApiSearchFuzzyPostRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiSearchFuzzyPostRequest) Execute() (FuzzySearchResponse, *_nethttp.Response, error) {
	return r.ApiService.SearchFuzzyPostExecute(r)
}

/*
 * SearchFuzzyPost Method for SearchFuzzyPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSearchFuzzyPostRequest
 */
func (a *SearchApiService) SearchFuzzyPost(ctx _context.Context) ApiSearchFuzzyPostRequest {
	return ApiSearchFuzzyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FuzzySearchResponse
 */
func (a *SearchApiService) SearchFuzzyPostExecute(r ApiSearchFuzzyPostRequest) (FuzzySearchResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FuzzySearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchFuzzyPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search/fuzzy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fuzzySearchRequest == nil {
		return localVarReturnValue, nil, reportError("fuzzySearchRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.fuzzySearchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPostRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	searchRequest *SearchRequest
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiSearchPostRequest) SearchRequest(searchRequest SearchRequest) ApiSearchPostRequest {
	r.searchRequest = &searchRequest
	return r
}
func (r ApiSearchPostRequest) Region(region string) ApiSearchPostRequest {
	r.region = &region
	return r
}
func (r ApiSearchPostRequest) Namespace(namespace string) ApiSearchPostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiSearchPostRequest) Index(index int32) ApiSearchPostRequest {
	r.index = &index
	return r
}
func (r ApiSearchPostRequest) Wait(wait int32) ApiSearchPostRequest {
	r.wait = &wait
	return r
}
func (r ApiSearchPostRequest) Stale(stale string) ApiSearchPostRequest {
	r.stale = &stale
	return r
}
func (r ApiSearchPostRequest) Prefix(prefix string) ApiSearchPostRequest {
	r.prefix = &prefix
	return r
}
func (r ApiSearchPostRequest) XNomadToken(xNomadToken string) ApiSearchPostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiSearchPostRequest) PerPage(perPage int32) ApiSearchPostRequest {
	r.perPage = &perPage
	return r
}
func (r ApiSearchPostRequest) NextToken(nextToken string) ApiSearchPostRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiSearchPostRequest) Execute() (SearchResponse, *_nethttp.Response, error) {
	return r.ApiService.SearchPostExecute(r)
}

/*
 * SearchPost Method for SearchPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSearchPostRequest
 */
func (a *SearchApiService) SearchPost(ctx _context.Context) ApiSearchPostRequest {
	return ApiSearchPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return SearchResponse
 */
func (a *SearchApiService) SearchPostExecute(r ApiSearchPostRequest) (SearchResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.searchRequest == nil {
		return localVarReturnValue, nil, reportError("searchRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.searchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
