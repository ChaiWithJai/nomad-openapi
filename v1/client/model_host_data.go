/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// HostData struct for HostData
type HostData struct {
	Disk *map[string]DiskUsage `json:"Disk,omitempty"`
	Environment *Object `json:"Environment,omitempty"`
	Hosts *string `json:"Hosts,omitempty"`
	Network *[]Object `json:"Network,omitempty"`
	OS *string `json:"OS,omitempty"`
	ResolvConf *string `json:"ResolvConf,omitempty"`
}

// NewHostData instantiates a new HostData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostData() *HostData {
	this := HostData{}
	return &this
}

// NewHostDataWithDefaults instantiates a new HostData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostDataWithDefaults() *HostData {
	this := HostData{}
	return &this
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *HostData) GetDisk() map[string]DiskUsage {
	if o == nil || o.Disk == nil {
		var ret map[string]DiskUsage
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetDiskOk() (*map[string]DiskUsage, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *HostData) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given map[string]DiskUsage and assigns it to the Disk field.
func (o *HostData) SetDisk(v map[string]DiskUsage) {
	o.Disk = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *HostData) GetEnvironment() Object {
	if o == nil || o.Environment == nil {
		var ret Object
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetEnvironmentOk() (*Object, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *HostData) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given Object and assigns it to the Environment field.
func (o *HostData) SetEnvironment(v Object) {
	o.Environment = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *HostData) GetHosts() string {
	if o == nil || o.Hosts == nil {
		var ret string
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetHostsOk() (*string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *HostData) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given string and assigns it to the Hosts field.
func (o *HostData) SetHosts(v string) {
	o.Hosts = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *HostData) GetNetwork() []Object {
	if o == nil || o.Network == nil {
		var ret []Object
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetNetworkOk() (*[]Object, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *HostData) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given []Object and assigns it to the Network field.
func (o *HostData) SetNetwork(v []Object) {
	o.Network = &v
}

// GetOS returns the OS field value if set, zero value otherwise.
func (o *HostData) GetOS() string {
	if o == nil || o.OS == nil {
		var ret string
		return ret
	}
	return *o.OS
}

// GetOSOk returns a tuple with the OS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetOSOk() (*string, bool) {
	if o == nil || o.OS == nil {
		return nil, false
	}
	return o.OS, true
}

// HasOS returns a boolean if a field has been set.
func (o *HostData) HasOS() bool {
	if o != nil && o.OS != nil {
		return true
	}

	return false
}

// SetOS gets a reference to the given string and assigns it to the OS field.
func (o *HostData) SetOS(v string) {
	o.OS = &v
}

// GetResolvConf returns the ResolvConf field value if set, zero value otherwise.
func (o *HostData) GetResolvConf() string {
	if o == nil || o.ResolvConf == nil {
		var ret string
		return ret
	}
	return *o.ResolvConf
}

// GetResolvConfOk returns a tuple with the ResolvConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData) GetResolvConfOk() (*string, bool) {
	if o == nil || o.ResolvConf == nil {
		return nil, false
	}
	return o.ResolvConf, true
}

// HasResolvConf returns a boolean if a field has been set.
func (o *HostData) HasResolvConf() bool {
	if o != nil && o.ResolvConf != nil {
		return true
	}

	return false
}

// SetResolvConf gets a reference to the given string and assigns it to the ResolvConf field.
func (o *HostData) SetResolvConf(v string) {
	o.ResolvConf = &v
}

func (o HostData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disk != nil {
		toSerialize["Disk"] = o.Disk
	}
	if o.Environment != nil {
		toSerialize["Environment"] = o.Environment
	}
	if o.Hosts != nil {
		toSerialize["Hosts"] = o.Hosts
	}
	if o.Network != nil {
		toSerialize["Network"] = o.Network
	}
	if o.OS != nil {
		toSerialize["OS"] = o.OS
	}
	if o.ResolvConf != nil {
		toSerialize["ResolvConf"] = o.ResolvConf
	}
	return json.Marshal(toSerialize)
}

type NullableHostData struct {
	value *HostData
	isSet bool
}

func (v NullableHostData) Get() *HostData {
	return v.value
}

func (v *NullableHostData) Set(val *HostData) {
	v.value = val
	v.isSet = true
}

func (v NullableHostData) IsSet() bool {
	return v.isSet
}

func (v *NullableHostData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostData(val *HostData) *NullableHostData {
	return &NullableHostData{value: val, isSet: true}
}

func (v NullableHostData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


