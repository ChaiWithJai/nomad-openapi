/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// NamespacesApiService NamespacesApi service
type NamespacesApiService service

type ApiNamespaceNamespaceNameDeleteRequest struct {
	ctx _context.Context
	ApiService *NamespacesApiService
	namespaceName string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiNamespaceNamespaceNameDeleteRequest) Region(region string) ApiNamespaceNamespaceNameDeleteRequest {
	r.region = &region
	return r
}
func (r ApiNamespaceNamespaceNameDeleteRequest) Namespace(namespace string) ApiNamespaceNamespaceNameDeleteRequest {
	r.namespace = &namespace
	return r
}
func (r ApiNamespaceNamespaceNameDeleteRequest) XNomadToken(xNomadToken string) ApiNamespaceNamespaceNameDeleteRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiNamespaceNamespaceNameDeleteRequest) IdempotencyToken(idempotencyToken string) ApiNamespaceNamespaceNameDeleteRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiNamespaceNamespaceNameDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.NamespaceNamespaceNameDeleteExecute(r)
}

/*
 * NamespaceNamespaceNameDelete Method for NamespaceNamespaceNameDelete
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param namespaceName The namespace identifier.
 * @return ApiNamespaceNamespaceNameDeleteRequest
 */
func (a *NamespacesApiService) NamespaceNamespaceNameDelete(ctx _context.Context, namespaceName string) ApiNamespaceNamespaceNameDeleteRequest {
	return ApiNamespaceNamespaceNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		namespaceName: namespaceName,
	}
}

/*
 * Execute executes the request
 */
func (a *NamespacesApiService) NamespaceNamespaceNameDeleteExecute(r ApiNamespaceNamespaceNameDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespacesApiService.NamespaceNamespaceNameDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/namespace/{namespaceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespaceName"+"}", _neturl.PathEscape(parameterToString(r.namespaceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiNamespaceNamespaceNameGetRequest struct {
	ctx _context.Context
	ApiService *NamespacesApiService
	namespaceName string
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiNamespaceNamespaceNameGetRequest) Region(region string) ApiNamespaceNamespaceNameGetRequest {
	r.region = &region
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) Namespace(namespace string) ApiNamespaceNamespaceNameGetRequest {
	r.namespace = &namespace
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) Index(index int32) ApiNamespaceNamespaceNameGetRequest {
	r.index = &index
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) Wait(wait int32) ApiNamespaceNamespaceNameGetRequest {
	r.wait = &wait
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) Stale(stale string) ApiNamespaceNamespaceNameGetRequest {
	r.stale = &stale
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) Prefix(prefix string) ApiNamespaceNamespaceNameGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) XNomadToken(xNomadToken string) ApiNamespaceNamespaceNameGetRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) PerPage(perPage int32) ApiNamespaceNamespaceNameGetRequest {
	r.perPage = &perPage
	return r
}
func (r ApiNamespaceNamespaceNameGetRequest) NextToken(nextToken string) ApiNamespaceNamespaceNameGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiNamespaceNamespaceNameGetRequest) Execute() (Namespace, *_nethttp.Response, error) {
	return r.ApiService.NamespaceNamespaceNameGetExecute(r)
}

/*
 * NamespaceNamespaceNameGet Method for NamespaceNamespaceNameGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param namespaceName The namespace identifier.
 * @return ApiNamespaceNamespaceNameGetRequest
 */
func (a *NamespacesApiService) NamespaceNamespaceNameGet(ctx _context.Context, namespaceName string) ApiNamespaceNamespaceNameGetRequest {
	return ApiNamespaceNamespaceNameGetRequest{
		ApiService: a,
		ctx: ctx,
		namespaceName: namespaceName,
	}
}

/*
 * Execute executes the request
 * @return Namespace
 */
func (a *NamespacesApiService) NamespaceNamespaceNameGetExecute(r ApiNamespaceNamespaceNameGetRequest) (Namespace, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Namespace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespacesApiService.NamespaceNamespaceNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/namespace/{namespaceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespaceName"+"}", _neturl.PathEscape(parameterToString(r.namespaceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNamespaceNamespaceNamePostRequest struct {
	ctx _context.Context
	ApiService *NamespacesApiService
	namespaceName string
	namespace2 *Namespace
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiNamespaceNamespaceNamePostRequest) Namespace2(namespace2 Namespace) ApiNamespaceNamespaceNamePostRequest {
	r.namespace2 = &namespace2
	return r
}
func (r ApiNamespaceNamespaceNamePostRequest) Region(region string) ApiNamespaceNamespaceNamePostRequest {
	r.region = &region
	return r
}
func (r ApiNamespaceNamespaceNamePostRequest) Namespace(namespace string) ApiNamespaceNamespaceNamePostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiNamespaceNamespaceNamePostRequest) XNomadToken(xNomadToken string) ApiNamespaceNamespaceNamePostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiNamespaceNamespaceNamePostRequest) IdempotencyToken(idempotencyToken string) ApiNamespaceNamespaceNamePostRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiNamespaceNamespaceNamePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.NamespaceNamespaceNamePostExecute(r)
}

/*
 * NamespaceNamespaceNamePost Method for NamespaceNamespaceNamePost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param namespaceName The namespace identifier.
 * @return ApiNamespaceNamespaceNamePostRequest
 */
func (a *NamespacesApiService) NamespaceNamespaceNamePost(ctx _context.Context, namespaceName string) ApiNamespaceNamespaceNamePostRequest {
	return ApiNamespaceNamespaceNamePostRequest{
		ApiService: a,
		ctx: ctx,
		namespaceName: namespaceName,
	}
}

/*
 * Execute executes the request
 */
func (a *NamespacesApiService) NamespaceNamespaceNamePostExecute(r ApiNamespaceNamespaceNamePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespacesApiService.NamespaceNamespaceNamePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/namespace/{namespaceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespaceName"+"}", _neturl.PathEscape(parameterToString(r.namespaceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.namespace2 == nil {
		return nil, reportError("namespace2 is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.namespace2
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiNamespacePostRequest struct {
	ctx _context.Context
	ApiService *NamespacesApiService
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiNamespacePostRequest) Region(region string) ApiNamespacePostRequest {
	r.region = &region
	return r
}
func (r ApiNamespacePostRequest) Namespace(namespace string) ApiNamespacePostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiNamespacePostRequest) XNomadToken(xNomadToken string) ApiNamespacePostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiNamespacePostRequest) IdempotencyToken(idempotencyToken string) ApiNamespacePostRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiNamespacePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.NamespacePostExecute(r)
}

/*
 * NamespacePost Method for NamespacePost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNamespacePostRequest
 */
func (a *NamespacesApiService) NamespacePost(ctx _context.Context) ApiNamespacePostRequest {
	return ApiNamespacePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *NamespacesApiService) NamespacePostExecute(r ApiNamespacePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespacesApiService.NamespacePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/namespace"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiNamespacesGetRequest struct {
	ctx _context.Context
	ApiService *NamespacesApiService
	namespaceListRequest *NamespaceListRequest
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiNamespacesGetRequest) NamespaceListRequest(namespaceListRequest NamespaceListRequest) ApiNamespacesGetRequest {
	r.namespaceListRequest = &namespaceListRequest
	return r
}
func (r ApiNamespacesGetRequest) Region(region string) ApiNamespacesGetRequest {
	r.region = &region
	return r
}
func (r ApiNamespacesGetRequest) Namespace(namespace string) ApiNamespacesGetRequest {
	r.namespace = &namespace
	return r
}
func (r ApiNamespacesGetRequest) Index(index int32) ApiNamespacesGetRequest {
	r.index = &index
	return r
}
func (r ApiNamespacesGetRequest) Wait(wait int32) ApiNamespacesGetRequest {
	r.wait = &wait
	return r
}
func (r ApiNamespacesGetRequest) Stale(stale string) ApiNamespacesGetRequest {
	r.stale = &stale
	return r
}
func (r ApiNamespacesGetRequest) Prefix(prefix string) ApiNamespacesGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiNamespacesGetRequest) XNomadToken(xNomadToken string) ApiNamespacesGetRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiNamespacesGetRequest) PerPage(perPage int32) ApiNamespacesGetRequest {
	r.perPage = &perPage
	return r
}
func (r ApiNamespacesGetRequest) NextToken(nextToken string) ApiNamespacesGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiNamespacesGetRequest) Execute() ([]Namespace, *_nethttp.Response, error) {
	return r.ApiService.NamespacesGetExecute(r)
}

/*
 * NamespacesGet Method for NamespacesGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiNamespacesGetRequest
 */
func (a *NamespacesApiService) NamespacesGet(ctx _context.Context) ApiNamespacesGetRequest {
	return ApiNamespacesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []Namespace
 */
func (a *NamespacesApiService) NamespacesGetExecute(r ApiNamespacesGetRequest) ([]Namespace, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Namespace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespacesApiService.NamespacesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/namespaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.namespaceListRequest == nil {
		return localVarReturnValue, nil, reportError("namespaceListRequest is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.namespaceListRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
