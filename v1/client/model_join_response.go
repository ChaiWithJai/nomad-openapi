/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JoinResponse struct for JoinResponse
type JoinResponse struct {
	Error *string `json:"error,omitempty"`
	NumJoined *int32 `json:"num_joined,omitempty"`
}

// NewJoinResponse instantiates a new JoinResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinResponse() *JoinResponse {
	this := JoinResponse{}
	return &this
}

// NewJoinResponseWithDefaults instantiates a new JoinResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinResponseWithDefaults() *JoinResponse {
	this := JoinResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *JoinResponse) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinResponse) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *JoinResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *JoinResponse) SetError(v string) {
	o.Error = &v
}

// GetNumJoined returns the NumJoined field value if set, zero value otherwise.
func (o *JoinResponse) GetNumJoined() int32 {
	if o == nil || o.NumJoined == nil {
		var ret int32
		return ret
	}
	return *o.NumJoined
}

// GetNumJoinedOk returns a tuple with the NumJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinResponse) GetNumJoinedOk() (*int32, bool) {
	if o == nil || o.NumJoined == nil {
		return nil, false
	}
	return o.NumJoined, true
}

// HasNumJoined returns a boolean if a field has been set.
func (o *JoinResponse) HasNumJoined() bool {
	if o != nil && o.NumJoined != nil {
		return true
	}

	return false
}

// SetNumJoined gets a reference to the given int32 and assigns it to the NumJoined field.
func (o *JoinResponse) SetNumJoined(v int32) {
	o.NumJoined = &v
}

func (o JoinResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.NumJoined != nil {
		toSerialize["num_joined"] = o.NumJoined
	}
	return json.Marshal(toSerialize)
}

type NullableJoinResponse struct {
	value *JoinResponse
	isSet bool
}

func (v NullableJoinResponse) Get() *JoinResponse {
	return v.value
}

func (v *NullableJoinResponse) Set(val *JoinResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinResponse(val *JoinResponse) *NullableJoinResponse {
	return &NullableJoinResponse{value: val, isSet: true}
}

func (v NullableJoinResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


