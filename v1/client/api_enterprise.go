/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EnterpriseApiService EnterpriseApi service
type EnterpriseApiService service

type ApiQuotaPostRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	quotaSpec *QuotaSpec
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiQuotaPostRequest) QuotaSpec(quotaSpec QuotaSpec) ApiQuotaPostRequest {
	r.quotaSpec = &quotaSpec
	return r
}
func (r ApiQuotaPostRequest) Region(region string) ApiQuotaPostRequest {
	r.region = &region
	return r
}
func (r ApiQuotaPostRequest) Namespace(namespace string) ApiQuotaPostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiQuotaPostRequest) XNomadToken(xNomadToken string) ApiQuotaPostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiQuotaPostRequest) IdempotencyToken(idempotencyToken string) ApiQuotaPostRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiQuotaPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.QuotaPostExecute(r)
}

/*
 * QuotaPost Method for QuotaPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiQuotaPostRequest
 */
func (a *EnterpriseApiService) QuotaPost(ctx _context.Context) ApiQuotaPostRequest {
	return ApiQuotaPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) QuotaPostExecute(r ApiQuotaPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.QuotaPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.quotaSpec == nil {
		return nil, reportError("quotaSpec is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.quotaSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQuotaSpecNameDeleteRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiQuotaSpecNameDeleteRequest) Region(region string) ApiQuotaSpecNameDeleteRequest {
	r.region = &region
	return r
}
func (r ApiQuotaSpecNameDeleteRequest) Namespace(namespace string) ApiQuotaSpecNameDeleteRequest {
	r.namespace = &namespace
	return r
}
func (r ApiQuotaSpecNameDeleteRequest) XNomadToken(xNomadToken string) ApiQuotaSpecNameDeleteRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiQuotaSpecNameDeleteRequest) IdempotencyToken(idempotencyToken string) ApiQuotaSpecNameDeleteRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiQuotaSpecNameDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.QuotaSpecNameDeleteExecute(r)
}

/*
 * QuotaSpecNameDelete Method for QuotaSpecNameDelete
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiQuotaSpecNameDeleteRequest
 */
func (a *EnterpriseApiService) QuotaSpecNameDelete(ctx _context.Context, specName string) ApiQuotaSpecNameDeleteRequest {
	return ApiQuotaSpecNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) QuotaSpecNameDeleteExecute(r ApiQuotaSpecNameDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.QuotaSpecNameDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQuotaSpecNameGetRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiQuotaSpecNameGetRequest) Region(region string) ApiQuotaSpecNameGetRequest {
	r.region = &region
	return r
}
func (r ApiQuotaSpecNameGetRequest) Namespace(namespace string) ApiQuotaSpecNameGetRequest {
	r.namespace = &namespace
	return r
}
func (r ApiQuotaSpecNameGetRequest) Index(index int32) ApiQuotaSpecNameGetRequest {
	r.index = &index
	return r
}
func (r ApiQuotaSpecNameGetRequest) Wait(wait int32) ApiQuotaSpecNameGetRequest {
	r.wait = &wait
	return r
}
func (r ApiQuotaSpecNameGetRequest) Stale(stale string) ApiQuotaSpecNameGetRequest {
	r.stale = &stale
	return r
}
func (r ApiQuotaSpecNameGetRequest) Prefix(prefix string) ApiQuotaSpecNameGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiQuotaSpecNameGetRequest) XNomadToken(xNomadToken string) ApiQuotaSpecNameGetRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiQuotaSpecNameGetRequest) PerPage(perPage int32) ApiQuotaSpecNameGetRequest {
	r.perPage = &perPage
	return r
}
func (r ApiQuotaSpecNameGetRequest) NextToken(nextToken string) ApiQuotaSpecNameGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiQuotaSpecNameGetRequest) Execute() (QuotaSpec, *_nethttp.Response, error) {
	return r.ApiService.QuotaSpecNameGetExecute(r)
}

/*
 * QuotaSpecNameGet Method for QuotaSpecNameGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiQuotaSpecNameGetRequest
 */
func (a *EnterpriseApiService) QuotaSpecNameGet(ctx _context.Context, specName string) ApiQuotaSpecNameGetRequest {
	return ApiQuotaSpecNameGetRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 * @return QuotaSpec
 */
func (a *EnterpriseApiService) QuotaSpecNameGetExecute(r ApiQuotaSpecNameGetRequest) (QuotaSpec, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QuotaSpec
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.QuotaSpecNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuotaSpecNamePostRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	specName string
	quotaSpec *QuotaSpec
	region *string
	namespace *string
	xNomadToken *string
	idempotencyToken *string
}

func (r ApiQuotaSpecNamePostRequest) QuotaSpec(quotaSpec QuotaSpec) ApiQuotaSpecNamePostRequest {
	r.quotaSpec = &quotaSpec
	return r
}
func (r ApiQuotaSpecNamePostRequest) Region(region string) ApiQuotaSpecNamePostRequest {
	r.region = &region
	return r
}
func (r ApiQuotaSpecNamePostRequest) Namespace(namespace string) ApiQuotaSpecNamePostRequest {
	r.namespace = &namespace
	return r
}
func (r ApiQuotaSpecNamePostRequest) XNomadToken(xNomadToken string) ApiQuotaSpecNamePostRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiQuotaSpecNamePostRequest) IdempotencyToken(idempotencyToken string) ApiQuotaSpecNamePostRequest {
	r.idempotencyToken = &idempotencyToken
	return r
}

func (r ApiQuotaSpecNamePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.QuotaSpecNamePostExecute(r)
}

/*
 * QuotaSpecNamePost Method for QuotaSpecNamePost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param specName The quota spec identifier.
 * @return ApiQuotaSpecNamePostRequest
 */
func (a *EnterpriseApiService) QuotaSpecNamePost(ctx _context.Context, specName string) ApiQuotaSpecNamePostRequest {
	return ApiQuotaSpecNamePostRequest{
		ApiService: a,
		ctx: ctx,
		specName: specName,
	}
}

/*
 * Execute executes the request
 */
func (a *EnterpriseApiService) QuotaSpecNamePostExecute(r ApiQuotaSpecNamePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.QuotaSpecNamePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/{specName}"
	localVarPath = strings.Replace(localVarPath, "{"+"specName"+"}", _neturl.PathEscape(parameterToString(r.specName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.quotaSpec == nil {
		return nil, reportError("quotaSpec is required and must be specified")
	}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.idempotencyToken != nil {
		localVarQueryParams.Add("idempotency_token", parameterToString(*r.idempotencyToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	// body params
	localVarPostBody = r.quotaSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQuotasGetRequest struct {
	ctx _context.Context
	ApiService *EnterpriseApiService
	region *string
	namespace *string
	index *int32
	wait *int32
	stale *string
	prefix *string
	xNomadToken *string
	perPage *int32
	nextToken *string
}

func (r ApiQuotasGetRequest) Region(region string) ApiQuotasGetRequest {
	r.region = &region
	return r
}
func (r ApiQuotasGetRequest) Namespace(namespace string) ApiQuotasGetRequest {
	r.namespace = &namespace
	return r
}
func (r ApiQuotasGetRequest) Index(index int32) ApiQuotasGetRequest {
	r.index = &index
	return r
}
func (r ApiQuotasGetRequest) Wait(wait int32) ApiQuotasGetRequest {
	r.wait = &wait
	return r
}
func (r ApiQuotasGetRequest) Stale(stale string) ApiQuotasGetRequest {
	r.stale = &stale
	return r
}
func (r ApiQuotasGetRequest) Prefix(prefix string) ApiQuotasGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiQuotasGetRequest) XNomadToken(xNomadToken string) ApiQuotasGetRequest {
	r.xNomadToken = &xNomadToken
	return r
}
func (r ApiQuotasGetRequest) PerPage(perPage int32) ApiQuotasGetRequest {
	r.perPage = &perPage
	return r
}
func (r ApiQuotasGetRequest) NextToken(nextToken string) ApiQuotasGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiQuotasGetRequest) Execute() ([]interface{}, *_nethttp.Response, error) {
	return r.ApiService.QuotasGetExecute(r)
}

/*
 * QuotasGet Method for QuotasGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiQuotasGetRequest
 */
func (a *EnterpriseApiService) QuotasGet(ctx _context.Context) ApiQuotasGetRequest {
	return ApiQuotasGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []interface{}
 */
func (a *EnterpriseApiService) QuotasGetExecute(r ApiQuotasGetRequest) ([]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseApiService.QuotasGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.wait != nil {
		localVarQueryParams.Add("wait", parameterToString(*r.wait, ""))
	}
	if r.stale != nil {
		localVarQueryParams.Add("stale", parameterToString(*r.stale, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.index != nil {
		localVarHeaderParams["index"] = parameterToString(*r.index, "")
	}
	if r.xNomadToken != nil {
		localVarHeaderParams["X-Nomad-Token"] = parameterToString(*r.xNomadToken, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Nomad-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Nomad-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
