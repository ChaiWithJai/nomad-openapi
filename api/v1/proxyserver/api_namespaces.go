/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A NamespacesApiController binds http requests to an api service and writes the service results to the http response
type NamespacesApiController struct {
	service NamespacesApiServicer
}

// NewNamespacesApiController creates a default api controller
func NewNamespacesApiController(s NamespacesApiServicer) Router {
	return &NamespacesApiController{service: s}
}

// Routes returns all of the api route for the NamespacesApiController
func (c *NamespacesApiController) Routes() Routes {
	return Routes{
		{
			"CreateNamespace",
			strings.ToUpper("Post"),
			"/v1/namespace",
			c.CreateNamespace,
		},
		{
			"DeleteNamespace",
			strings.ToUpper("Delete"),
			"/v1/namespace/{namespaceName}",
			c.DeleteNamespace,
		},
		{
			"GetNamespace",
			strings.ToUpper("Get"),
			"/v1/namespace/{namespaceName}",
			c.GetNamespace,
		},
		{
			"GetNamespaces",
			strings.ToUpper("Get"),
			"/v1/namespaces",
			c.GetNamespaces,
		},
		{
			"PostNamespace",
			strings.ToUpper("Post"),
			"/v1/namespace/{namespaceName}",
			c.PostNamespace,
		},
	}
}

// CreateNamespace -
func (c *NamespacesApiController) CreateNamespace(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.CreateNamespace(r.Context(), region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteNamespace -
func (c *NamespacesApiController) DeleteNamespace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	namespaceName := params["namespaceName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.DeleteNamespace(r.Context(), namespaceName, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetNamespace -
func (c *NamespacesApiController) GetNamespace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	namespaceName := params["namespaceName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetNamespace(r.Context(), namespaceName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetNamespaces -
func (c *NamespacesApiController) GetNamespaces(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	namespaceListRequest := &NamespaceListRequest{}
	if err := json.NewDecoder(r.Body).Decode(&namespaceListRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetNamespaces(r.Context(), *namespaceListRequest, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostNamespace -
func (c *NamespacesApiController) PostNamespace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	namespaceName := params["namespaceName"]

	namespace2 := &Namespace{}
	if err := json.NewDecoder(r.Body).Decode(&namespace2); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostNamespace(r.Context(), namespaceName, *namespace2, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
