/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A VolumesApiController binds http requests to an api service and writes the service results to the http response
type VolumesApiController struct {
	service VolumesApiServicer
}

// NewVolumesApiController creates a default api controller
func NewVolumesApiController(s VolumesApiServicer) Router {
	return &VolumesApiController{service: s}
}

// Routes returns all of the api route for the VolumesApiController
func (c *VolumesApiController) Routes() Routes {
	return Routes{
		{
			"CreateVolume",
			strings.ToUpper("Post"),
			"/v1/volume/csi/{volumeId}/{action}",
			c.CreateVolume,
		},
		{
			"DeleteSnapshot",
			strings.ToUpper("Delete"),
			"/v1/volumes/snapshot",
			c.DeleteSnapshot,
		},
		{
			"DeleteVolumeRegistration",
			strings.ToUpper("Delete"),
			"/v1/volume/csi/{volumeId}",
			c.DeleteVolumeRegistration,
		},
		{
			"DetachOrDeleteVolume",
			strings.ToUpper("Delete"),
			"/v1/volume/csi/{volumeId}/{action}",
			c.DetachOrDeleteVolume,
		},
		{
			"GetExternalVolumes",
			strings.ToUpper("Get"),
			"/v1/volumes/external",
			c.GetExternalVolumes,
		},
		{
			"GetSnapshots",
			strings.ToUpper("Get"),
			"/v1/volumes/snapshot",
			c.GetSnapshots,
		},
		{
			"GetVolume",
			strings.ToUpper("Get"),
			"/v1/volume/csi/{volumeId}",
			c.GetVolume,
		},
		{
			"GetVolumes",
			strings.ToUpper("Get"),
			"/v1/volumes",
			c.GetVolumes,
		},
		{
			"PostSnapshot",
			strings.ToUpper("Post"),
			"/v1/volumes/snapshot",
			c.PostSnapshot,
		},
		{
			"PostVolume",
			strings.ToUpper("Post"),
			"/v1/volumes",
			c.PostVolume,
		},
		{
			"PostVolumeRegistration",
			strings.ToUpper("Post"),
			"/v1/volume/csi/{volumeId}",
			c.PostVolumeRegistration,
		},
	}
}

// CreateVolume -
func (c *VolumesApiController) CreateVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	volumeId := params["volumeId"]

	action := params["action"]

	csiVolumeCreateRequest := &CsiVolumeCreateRequest{}
	if err := json.NewDecoder(r.Body).Decode(&csiVolumeCreateRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.CreateVolume(r.Context(), volumeId, action, *csiVolumeCreateRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSnapshot -
func (c *VolumesApiController) DeleteSnapshot(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	pluginId := query.Get("plugin_id")
	snapshotId := query.Get("snapshot_id")
	result, err := c.service.DeleteSnapshot(r.Context(), region, namespace, xNomadToken, idempotencyToken, pluginId, snapshotId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteVolumeRegistration -
func (c *VolumesApiController) DeleteVolumeRegistration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	volumeId := params["volumeId"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	force := query.Get("force")
	result, err := c.service.DeleteVolumeRegistration(r.Context(), volumeId, region, namespace, xNomadToken, idempotencyToken, force)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DetachOrDeleteVolume -
func (c *VolumesApiController) DetachOrDeleteVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	volumeId := params["volumeId"]

	action := params["action"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	node := query.Get("node")
	result, err := c.service.DetachOrDeleteVolume(r.Context(), volumeId, action, region, namespace, xNomadToken, idempotencyToken, node)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetExternalVolumes -
func (c *VolumesApiController) GetExternalVolumes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	pluginId := query.Get("plugin_id")
	result, err := c.service.GetExternalVolumes(r.Context(), region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetSnapshots -
func (c *VolumesApiController) GetSnapshots(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	pluginId := query.Get("plugin_id")
	result, err := c.service.GetSnapshots(r.Context(), region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetVolume -
func (c *VolumesApiController) GetVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	volumeId := params["volumeId"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetVolume(r.Context(), volumeId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetVolumes -
func (c *VolumesApiController) GetVolumes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	nodeId := query.Get("node_id")
	pluginId := query.Get("plugin_id")
	type_ := query.Get("type")
	result, err := c.service.GetVolumes(r.Context(), region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, nodeId, pluginId, type_)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostSnapshot -
func (c *VolumesApiController) PostSnapshot(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	csiSnapshotCreateRequest := &CsiSnapshotCreateRequest{}
	if err := json.NewDecoder(r.Body).Decode(&csiSnapshotCreateRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostSnapshot(r.Context(), *csiSnapshotCreateRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostVolume -
func (c *VolumesApiController) PostVolume(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	csiVolumeRegisterRequest := &CsiVolumeRegisterRequest{}
	if err := json.NewDecoder(r.Body).Decode(&csiVolumeRegisterRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostVolume(r.Context(), *csiVolumeRegisterRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostVolumeRegistration -
func (c *VolumesApiController) PostVolumeRegistration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	volumeId := params["volumeId"]

	csiVolumeRegisterRequest := &CsiVolumeRegisterRequest{}
	if err := json.NewDecoder(r.Body).Decode(&csiVolumeRegisterRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostVolumeRegistration(r.Context(), volumeId, *csiVolumeRegisterRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
