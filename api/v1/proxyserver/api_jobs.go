/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A JobsApiController binds http requests to an api service and writes the service results to the http response
type JobsApiController struct {
	service JobsApiServicer
}

// NewJobsApiController creates a default api controller
func NewJobsApiController(s JobsApiServicer) Router {
	return &JobsApiController{service: s}
}

// Routes returns all of the api route for the JobsApiController
func (c *JobsApiController) Routes() Routes {
	return Routes{
		{
			"DeleteJob",
			strings.ToUpper("Delete"),
			"/v1/job/{jobName}",
			c.DeleteJob,
		},
		{
			"GetJob",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}",
			c.GetJob,
		},
		{
			"GetJobAllocations",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/allocations",
			c.GetJobAllocations,
		},
		{
			"GetJobDeployment",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/deployment",
			c.GetJobDeployment,
		},
		{
			"GetJobDeployments",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/deployments",
			c.GetJobDeployments,
		},
		{
			"GetJobEvaluations",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/evaluations",
			c.GetJobEvaluations,
		},
		{
			"GetJobScaleStatus",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/scale",
			c.GetJobScaleStatus,
		},
		{
			"GetJobSummary",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/summary",
			c.GetJobSummary,
		},
		{
			"GetJobVersions",
			strings.ToUpper("Get"),
			"/v1/job/{jobName}/versions",
			c.GetJobVersions,
		},
		{
			"GetJobs",
			strings.ToUpper("Get"),
			"/v1/jobs",
			c.GetJobs,
		},
		{
			"PostJob",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}",
			c.PostJob,
		},
		{
			"PostJobDispatch",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/dispatch",
			c.PostJobDispatch,
		},
		{
			"PostJobEvaluate",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/evaluate",
			c.PostJobEvaluate,
		},
		{
			"PostJobParse",
			strings.ToUpper("Post"),
			"/v1/jobs/parse",
			c.PostJobParse,
		},
		{
			"PostJobPeriodicForce",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/periodic/force",
			c.PostJobPeriodicForce,
		},
		{
			"PostJobPlan",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/plan",
			c.PostJobPlan,
		},
		{
			"PostJobRevert",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/revert",
			c.PostJobRevert,
		},
		{
			"PostJobScalingRequest",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/scale",
			c.PostJobScalingRequest,
		},
		{
			"PostJobStability",
			strings.ToUpper("Post"),
			"/v1/job/{jobName}/stable",
			c.PostJobStability,
		},
		{
			"PostJobValidateRequest",
			strings.ToUpper("Post"),
			"/v1/validate/job",
			c.PostJobValidateRequest,
		},
		{
			"RegisterJob",
			strings.ToUpper("Post"),
			"/v1/jobs",
			c.RegisterJob,
		},
	}
}

// DeleteJob -
func (c *JobsApiController) DeleteJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	purge, err := parseBoolParameter(query.Get("purge"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	global, err := parseBoolParameter(query.Get("global"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.DeleteJob(r.Context(), jobName, region, namespace, xNomadToken, idempotencyToken, purge, global)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJob -
func (c *JobsApiController) GetJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJob(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobAllocations -
func (c *JobsApiController) GetJobAllocations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobAllocations(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobDeployment -
func (c *JobsApiController) GetJobDeployment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobDeployment(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobDeployments -
func (c *JobsApiController) GetJobDeployments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	all, err := parseInt32Parameter(query.Get("all"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetJobDeployments(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobEvaluations -
func (c *JobsApiController) GetJobEvaluations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobEvaluations(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobScaleStatus -
func (c *JobsApiController) GetJobScaleStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobScaleStatus(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobSummary -
func (c *JobsApiController) GetJobSummary(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobSummary(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobVersions -
func (c *JobsApiController) GetJobVersions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	diffs, err := parseBoolParameter(query.Get("diffs"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.GetJobVersions(r.Context(), jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetJobs -
func (c *JobsApiController) GetJobs(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	region := query.Get("region")
	namespace := query.Get("namespace")
	index, err := parseInt32Parameter(query.Get("index"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	wait := query.Get("wait")
	stale := query.Get("stale")
	prefix := query.Get("prefix")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	perPage, err := parseInt32Parameter(query.Get("per_page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	nextToken := query.Get("next_token")
	result, err := c.service.GetJobs(r.Context(), region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJob -
func (c *JobsApiController) PostJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobRegisterRequest := &JobRegisterRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobRegisterRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJob(r.Context(), jobName, *jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobDispatch -
func (c *JobsApiController) PostJobDispatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobDispatchRequest := &JobDispatchRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobDispatchRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobDispatch(r.Context(), jobName, *jobDispatchRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobEvaluate -
func (c *JobsApiController) PostJobEvaluate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobEvaluateRequest := &JobEvaluateRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobEvaluateRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobEvaluate(r.Context(), jobName, *jobEvaluateRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobParse -
func (c *JobsApiController) PostJobParse(w http.ResponseWriter, r *http.Request) {
	jobsParseRequest := &JobsParseRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobsParseRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.PostJobParse(r.Context(), *jobsParseRequest)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobPeriodicForce -
func (c *JobsApiController) PostJobPeriodicForce(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobPeriodicForce(r.Context(), jobName, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobPlan -
func (c *JobsApiController) PostJobPlan(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobPlanRequest := &JobPlanRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobPlanRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobPlan(r.Context(), jobName, *jobPlanRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobRevert -
func (c *JobsApiController) PostJobRevert(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobRevertRequest := &JobRevertRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobRevertRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobRevert(r.Context(), jobName, *jobRevertRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobScalingRequest -
func (c *JobsApiController) PostJobScalingRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	scalingRequest := &ScalingRequest{}
	if err := json.NewDecoder(r.Body).Decode(&scalingRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobScalingRequest(r.Context(), jobName, *scalingRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobStability -
func (c *JobsApiController) PostJobStability(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobName := params["jobName"]

	jobStabilityRequest := &JobStabilityRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobStabilityRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobStability(r.Context(), jobName, *jobStabilityRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// PostJobValidateRequest -
func (c *JobsApiController) PostJobValidateRequest(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jobValidateRequest := &JobValidateRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobValidateRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.PostJobValidateRequest(r.Context(), *jobValidateRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// RegisterJob -
func (c *JobsApiController) RegisterJob(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jobRegisterRequest := &JobRegisterRequest{}
	if err := json.NewDecoder(r.Body).Decode(&jobRegisterRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	region := query.Get("region")
	namespace := query.Get("namespace")
	xNomadToken := r.Header.Get("X-Nomad-Token")
	idempotencyToken := query.Get("idempotency_token")
	result, err := c.service.RegisterJob(r.Context(), *jobRegisterRequest, region, namespace, xNomadToken, idempotencyToken)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
